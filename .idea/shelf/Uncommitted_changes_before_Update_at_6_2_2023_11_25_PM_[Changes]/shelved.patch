Index: src/socket/ServerClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package socket;\r\n\r\nimport socket.packages.Packet;\r\nimport util.Console;\r\n\r\nimport java.net.Socket;\r\n\r\npublic class ServerClient extends Client {\r\n    public ServerClient(Socket socket) {\r\n        super(socket);\r\n    }\r\n\r\n    @Override\r\n    public Packet receive(Packet packet){\r\n        util.Console.message(\"Server received packet from client.\", Console.PrintType.Socket);\r\n        return super.receive(packet);\r\n    }\r\n\r\n    @Override\r\n    public void send(Packet packet) {\r\n        util.Console.message(\"Server sent packet to client.\", Console.PrintType.Socket);\r\n        super.send(packet);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/socket/ServerClient.java b/src/socket/ServerClient.java
--- a/src/socket/ServerClient.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/socket/ServerClient.java	(date 1685740208552)
@@ -12,13 +12,13 @@
 
     @Override
     public Packet receive(Packet packet){
-        util.Console.message("Server received packet from client.", Console.PrintType.Socket);
+        util.Console.message("Server received packet from client.", this);
         return super.receive(packet);
     }
 
     @Override
     public void send(Packet packet) {
-        util.Console.message("Server sent packet to client.", Console.PrintType.Socket);
+        util.Console.message("Server sent packet to client.", this);
         super.send(packet);
     }
 }
Index: src/socket/Server.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package socket;\r\n\r\nimport socket.events.ServerEventHandler;\r\nimport util.Array;\r\nimport util.Console;\r\n\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\n\r\npublic class Server {\r\n    public static final int PORT = 51130;\r\n    public static final int MAX_SOCKET_CONNECTIONS = 4;\r\n\r\n    private static ServerSocket serverSocket = null;\r\n\r\n    public static ServerSocket getServerSocket() {\r\n        return serverSocket;\r\n    }\r\n\r\n    public static ServerEventHandler eventHandler = new ServerEventHandler();\r\n\r\n    // TODO : MAIN\r\n    public static void start() {\r\n        Console.message(\"Trying to start the Server on port \" + PORT, Console.PrintType.Socket);\r\n        if (isMasterUp() || isMasterActive()) {\r\n            Console.error(\"Failed to start the Server.Server is already UP!\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        Console.message(\"Trying to initialize ServerSocket\", Console.PrintType.Socket);\r\n        try {\r\n            serverSocket = new ServerSocket(PORT);\r\n\r\n            Console.message(\"ServerSocket initialized.Server started\", Console.PrintType.Socket);\r\n            eventHandler.onServerStarted();\r\n        } catch (Exception ex) {\r\n            Console.error(\"Failed to initialize ServerSocket!\", Console.PrintType.Socket);\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public static void stop() {\r\n        if (isListening())\r\n            stopListening();\r\n\r\n        Console.message(\"Trying to stop the Server on port \" + PORT, Console.PrintType.Socket);\r\n        if (isClosed()) {\r\n            Console.error(\"Failed to stop the Server.Server is already CLOSED!\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        Console.message(\"Trying to stop ServerSocket\", Console.PrintType.Socket);\r\n        try {\r\n            serverSocket.close();\r\n\r\n            Console.message(\"ServerSocket stopped.Server stopped\", Console.PrintType.Socket);\r\n            eventHandler.onServerStopped();\r\n        } catch (Exception ex) {\r\n            Console.error(\"Failed to stop ServerSocket!\", Console.PrintType.Socket);\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    // TODO : VALIDATIONS\r\n    public static boolean isNull() {\r\n        return getServerSocket() == null;\r\n    }\r\n\r\n    public static boolean isClosed() {\r\n        return isNull() || getServerSocket().isClosed();\r\n    }\r\n\r\n    public static boolean isMasterActive() {\r\n        return !isClosed();\r\n    }\r\n\r\n    public static boolean isMasterUp() {\r\n        try (ServerSocket newSocket = new ServerSocket(PORT)) {\r\n            newSocket.close();\r\n        } catch (Exception ex) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // TODO : CONNECTIONS\r\n\r\n    private static final util.Array<Socket> connectedSockets = new Array<>();\r\n\r\n    public static util.Array<Socket> getConnectedSockets() {\r\n        return connectedSockets;\r\n    }\r\n\r\n    private static boolean listening = false;\r\n\r\n    public static boolean isListening() {\r\n        return listening;\r\n    }\r\n\r\n    public static void startListening() {\r\n        Console.message(\"Trying to start the Server Listening process\", Console.PrintType.Socket);\r\n        if (isListening()) {\r\n            Console.error(\"Failed to start the Server Listening process.Server is already Listening!\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        listening = true;\r\n\r\n        Console.message(\"Server started Listening\", Console.PrintType.Socket);\r\n        eventHandler.onServerStartListening();\r\n\r\n        while (isListening()) {\r\n\r\n            Console.message(\"Waiting for new connection...\", Console.PrintType.Socket);\r\n            try {\r\n                Socket clientSocket = serverSocket.accept();\r\n                handleNewConnection(clientSocket);\r\n\r\n                if (connectedSockets.size() >= MAX_SOCKET_CONNECTIONS)\r\n                    stopListening();\r\n\r\n            } catch (Exception ex) {\r\n                Console.error(\"Failed to accept connection from ClientSocket!\", Console.PrintType.Socket);\r\n                ex.printStackTrace();\r\n                break;\r\n            }\r\n\r\n        }\r\n\r\n        Console.message(\"Server stopped Listening\", Console.PrintType.Socket);\r\n        eventHandler.onServerStopListening();\r\n    }\r\n\r\n    public static void stopListening() {\r\n        if (!isListening()) {\r\n            Console.error(\"Failed to stop Listening process.Server is already not Listening!\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n        Console.message(\"Trying to stop Listening process\", Console.PrintType.Socket);\r\n        listening = false;\r\n    }\r\n\r\n    private static void handleNewConnection(Socket clientSocket) {\r\n        Console.message(\"New connection received IP_ADDER \" + clientSocket.getInetAddress(), Console.PrintType.Socket);\r\n        if (connectedSockets.contains(clientSocket)) {\r\n            Console.error(\"Failed to register new Socket.Socket is already registered!\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        connectedSockets.add(clientSocket);\r\n\r\n        Console.message(\"New connection Socket successfully registered\", Console.PrintType.Socket);\r\n        eventHandler.onSocketConnected(clientSocket);\r\n    }\r\n\r\n    @Deprecated\r\n    public static int determineFreePort() {\r\n        int freePort = 51130;\r\n        boolean isOccupied = true;\r\n\r\n        while (isOccupied) {\r\n            try (ServerSocket newSocket = new ServerSocket(freePort)) {\r\n                isOccupied = false;\r\n            } catch (Exception ex) {\r\n                ++freePort;\r\n            }\r\n        }\r\n\r\n        return freePort;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/socket/Server.java b/src/socket/Server.java
--- a/src/socket/Server.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/socket/Server.java	(date 1685740197350)
@@ -21,20 +21,20 @@
 
     // TODO : MAIN
     public static void start() {
-        Console.message("Trying to start the Server on port " + PORT, Console.PrintType.Socket);
+        Console.message("Trying to start the Server on port " + PORT, null);
         if (isMasterUp() || isMasterActive()) {
-            Console.error("Failed to start the Server.Server is already UP!", Console.PrintType.Socket);
+            Console.error("Failed to start the Server.Server is already UP!", null);
             return;
         }
 
-        Console.message("Trying to initialize ServerSocket", Console.PrintType.Socket);
+        Console.message("Trying to initialize ServerSocket", null);
         try {
             serverSocket = new ServerSocket(PORT);
 
-            Console.message("ServerSocket initialized.Server started", Console.PrintType.Socket);
+            Console.message("ServerSocket initialized.Server started", null);
             eventHandler.onServerStarted();
         } catch (Exception ex) {
-            Console.error("Failed to initialize ServerSocket!", Console.PrintType.Socket);
+            Console.error("Failed to initialize ServerSocket!", null);
             ex.printStackTrace();
         }
     }
@@ -43,20 +43,20 @@
         if (isListening())
             stopListening();
 
-        Console.message("Trying to stop the Server on port " + PORT, Console.PrintType.Socket);
+        Console.message("Trying to stop the Server on port " + PORT, null);
         if (isClosed()) {
-            Console.error("Failed to stop the Server.Server is already CLOSED!", Console.PrintType.Socket);
+            Console.error("Failed to stop the Server.Server is already CLOSED!", null);
             return;
         }
 
-        Console.message("Trying to stop ServerSocket", Console.PrintType.Socket);
+        Console.message("Trying to stop ServerSocket", null);
         try {
             serverSocket.close();
 
-            Console.message("ServerSocket stopped.Server stopped", Console.PrintType.Socket);
+            Console.message("ServerSocket stopped.Server stopped", null);
             eventHandler.onServerStopped();
         } catch (Exception ex) {
-            Console.error("Failed to stop ServerSocket!", Console.PrintType.Socket);
+            Console.error("Failed to stop ServerSocket!", null);
             ex.printStackTrace();
         }
     }
@@ -98,20 +98,20 @@
     }
 
     public static void startListening() {
-        Console.message("Trying to start the Server Listening process", Console.PrintType.Socket);
+        Console.message("Trying to start the Server Listening process", null);
         if (isListening()) {
-            Console.error("Failed to start the Server Listening process.Server is already Listening!", Console.PrintType.Socket);
+            Console.error("Failed to start the Server Listening process.Server is already Listening!", null);
             return;
         }
 
         listening = true;
 
-        Console.message("Server started Listening", Console.PrintType.Socket);
+        Console.message("Server started Listening", null);
         eventHandler.onServerStartListening();
 
         while (isListening()) {
 
-            Console.message("Waiting for new connection...", Console.PrintType.Socket);
+            Console.message("Waiting for new connection...", null);
             try {
                 Socket clientSocket = serverSocket.accept();
                 handleNewConnection(clientSocket);
@@ -120,36 +120,36 @@
                     stopListening();
 
             } catch (Exception ex) {
-                Console.error("Failed to accept connection from ClientSocket!", Console.PrintType.Socket);
+                Console.error("Failed to accept connection from ClientSocket!",null);
                 ex.printStackTrace();
                 break;
             }
 
         }
 
-        Console.message("Server stopped Listening", Console.PrintType.Socket);
+        Console.message("Server stopped Listening", null);
         eventHandler.onServerStopListening();
     }
 
     public static void stopListening() {
         if (!isListening()) {
-            Console.error("Failed to stop Listening process.Server is already not Listening!", Console.PrintType.Socket);
+            Console.error("Failed to stop Listening process.Server is already not Listening!", null);
             return;
         }
-        Console.message("Trying to stop Listening process", Console.PrintType.Socket);
+        Console.message("Trying to stop Listening process", null);
         listening = false;
     }
 
     private static void handleNewConnection(Socket clientSocket) {
-        Console.message("New connection received IP_ADDER " + clientSocket.getInetAddress(), Console.PrintType.Socket);
+        Console.message("New connection received IP_ADDER " + clientSocket.getInetAddress(), null);
         if (connectedSockets.contains(clientSocket)) {
-            Console.error("Failed to register new Socket.Socket is already registered!", Console.PrintType.Socket);
+            Console.error("Failed to register new Socket.Socket is already registered!", null);
             return;
         }
 
         connectedSockets.add(clientSocket);
 
-        Console.message("New connection Socket successfully registered", Console.PrintType.Socket);
+        Console.message("New connection Socket successfully registered", null);
         eventHandler.onSocketConnected(clientSocket);
     }
 
Index: src/socket/ServerRoom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package socket;\r\n\r\nimport util.Array;\r\nimport util.Console;\r\nimport util.events.ArgEvent;\r\n\r\npublic class ServerRoom implements Runnable {\r\n    public static final int MAX_CLIENTS = 2;\r\n\r\n    private final util.Array<Client> clients = new Array<>();\r\n\r\n    public util.Array<Client> getClients() {\r\n        return this.clients;\r\n    }\r\n\r\n    private boolean open = true;\r\n\r\n    public final boolean isOpen() {\r\n        return this.open;\r\n    }\r\n\r\n    private boolean inProgress = false;\r\n\r\n    public final boolean isInProgress() {\r\n        return this.inProgress;\r\n    }\r\n\r\n    public void clientTryJoin(Client client) {\r\n        util.Console.message(\"Client is trying to join a room\", Console.PrintType.Socket);\r\n        if (!isOpen()) {\r\n            util.Console.warning(\"Client failed to join a room.Room is closed\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        if (clients.contains(client)) {\r\n            util.Console.warning(\"Client failed to join a room.Client is already in this room\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        clients.add(client);\r\n        util.Console.message(\"Client joined the room\", Console.PrintType.Socket);\r\n\r\n        if (clients.size() >= MAX_CLIENTS) {\r\n            util.Console.warning(\"ROOM MAX_CLIENT_SIZE exceeded!\", Console.PrintType.Socket);\r\n            util.Console.message(\"Closing the room\", Console.PrintType.Socket);\r\n            open = false;\r\n            util.Console.message(\"Room closed\", Console.PrintType.Socket);\r\n            util.Console.message(\"Creating room thread\", Console.PrintType.Socket);\r\n            Thread roomThread = new Thread(this);\r\n            util.Console.message(\"Starting room thread\", Console.PrintType.Socket);\r\n            roomThread.start();\r\n        }\r\n    }\r\n\r\n    public ServerRoom() {\r\n        util.Console.message(\"New Server Room created\", Console.PrintType.Socket);\r\n    }\r\n\r\n    public static util.events.ArgEvent<ServerRoom> onRoomStarted = new ArgEvent<>();\r\n\r\n    @Override\r\n    public void run() {\r\n        inProgress = true;\r\n\r\n        util.Console.message(\"Room process started\", Console.PrintType.Socket);\r\n\r\n        onRoomStarted.run(this);\r\n\r\n        util.Console.message(\"Room process finished\", Console.PrintType.Socket);\r\n        inProgress = false;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/socket/ServerRoom.java b/src/socket/ServerRoom.java
--- a/src/socket/ServerRoom.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/socket/ServerRoom.java	(date 1685740241582)
@@ -26,34 +26,34 @@
     }
 
     public void clientTryJoin(Client client) {
-        util.Console.message("Client is trying to join a room", Console.PrintType.Socket);
+        util.Console.message("Client is trying to join a room", null);
         if (!isOpen()) {
-            util.Console.warning("Client failed to join a room.Room is closed", Console.PrintType.Socket);
+            util.Console.warning("Client failed to join a room.Room is closed", null);
             return;
         }
 
         if (clients.contains(client)) {
-            util.Console.warning("Client failed to join a room.Client is already in this room", Console.PrintType.Socket);
+            util.Console.warning("Client failed to join a room.Client is already in this room", null);
             return;
         }
 
         clients.add(client);
-        util.Console.message("Client joined the room", Console.PrintType.Socket);
+        util.Console.message("Client joined the room", null);
 
         if (clients.size() >= MAX_CLIENTS) {
-            util.Console.warning("ROOM MAX_CLIENT_SIZE exceeded!", Console.PrintType.Socket);
-            util.Console.message("Closing the room", Console.PrintType.Socket);
+            util.Console.warning("ROOM MAX_CLIENT_SIZE exceeded!", null);
+            util.Console.message("Closing the room", null);
             open = false;
-            util.Console.message("Room closed", Console.PrintType.Socket);
-            util.Console.message("Creating room thread", Console.PrintType.Socket);
+            util.Console.message("Room closed", null);
+            util.Console.message("Creating room thread", null);
             Thread roomThread = new Thread(this);
-            util.Console.message("Starting room thread", Console.PrintType.Socket);
+            util.Console.message("Starting room thread", null);
             roomThread.start();
         }
     }
 
     public ServerRoom() {
-        util.Console.message("New Server Room created", Console.PrintType.Socket);
+        util.Console.message("New Server Room created", null);
     }
 
     public static util.events.ArgEvent<ServerRoom> onRoomStarted = new ArgEvent<>();
@@ -62,11 +62,11 @@
     public void run() {
         inProgress = true;
 
-        util.Console.message("Room process started", Console.PrintType.Socket);
+        util.Console.message("Room process started", null);
 
         onRoomStarted.run(this);
 
-        util.Console.message("Room process finished", Console.PrintType.Socket);
+        util.Console.message("Room process finished", null);
         inProgress = false;
     }
 }
\ No newline at end of file
Index: src/util/Console.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package util;\r\n\r\nimport java.time.LocalTime;\r\n\r\npublic class Console {\r\n    public enum PrintType {\r\n        Log, Audio, Game, Gui, Socket, Util, Main\r\n    }\r\n\r\n    private static final String ANSI_RESET = \"\\u001B[0m\";\r\n    private static final String ANSI_GREEN = \"\\u001B[32m\";\r\n    private static final String ANSI_YELLOW = \"\\u001B[33m\";\r\n    private static final String ANSI_RED = \"\\u001B[31m\";\r\n    private static final String ANSI_BLACK = \"\\u001B[30m\";\r\n    private static final String ANSI_BLUE = \"\\u001B[34m\";\r\n    private static final String ANSI_CYAN = \"\\u001B[36m\";\r\n    private static final String ANSI_PURPLE = \"\\u001B[35m\";\r\n    private static final String ANSI_WHITE = \"\\u001B[37m\";\r\n    private static final String ANSI_BRIGHT_BLACK = \"\\u001B[90m\";\r\n    private static final String ANSI_BRIGHT_BLUE = \"\\u001B[94m\";\r\n    private static final String ANSI_BRIGHT_CYAN = \"\\u001B[96m\";\r\n    private static final String ANSI_BRIGHT_PURPLE = \"\\u001B[95m\";\r\n    private static final String ANSI_BRIGHT_WHITE = \"\\u001B[97m\";\r\n\r\n    private static void printTime() {\r\n        System.out.print(\"[\" + LocalTime.now().toString() + \"]\");\r\n    }\r\n\r\n    private static void printType(PrintType type) {\r\n        System.out.print(\"[\");\r\n        switch (type) {\r\n            case Log -> System.out.print(ANSI_WHITE + \" [Log] \" + ANSI_RESET);\r\n            case Game -> System.out.print(ANSI_BRIGHT_BLUE + \" [Game] \" + ANSI_RESET);\r\n            case Audio -> System.out.print(ANSI_PURPLE + \" [Audio] \" + ANSI_RESET);\r\n            case Gui -> System.out.print(ANSI_BRIGHT_PURPLE + \" [Gui] \" + ANSI_RESET);\r\n            case Socket -> System.out.print(ANSI_CYAN + \" [Socket] \" + ANSI_RESET);\r\n            case Util -> System.out.print(ANSI_BRIGHT_BLACK + \" [Util] \" + ANSI_RESET);\r\n            default -> System.out.print(ANSI_BLUE + \" [Main] \" + ANSI_RESET);\r\n        }\r\n        System.out.print(\"]\");\r\n    }\r\n\r\n    public static void message(String message, PrintType type) {\r\n        printTime();\r\n        printType(type);\r\n        System.out.println(ANSI_GREEN + \" [MSG] \" + ANSI_RESET + \" #\" + message);\r\n    }\r\n\r\n    public static void warning(String message, PrintType type) {\r\n        printTime();\r\n        printType(type);\r\n        System.out.println(ANSI_YELLOW + \" [WRN] \" + ANSI_RESET + \" #\" + message);\r\n    }\r\n\r\n    public static void error(String message, PrintType type) {\r\n        printTime();\r\n        printType(type);\r\n        System.out.println(ANSI_RED + \" [ERR] \" + ANSI_RESET + \" #\" + message);\r\n    }\r\n\r\n    public static void message(String message) {\r\n        message(message, PrintType.Log);\r\n    }\r\n    public static void message(int message) {\r\n        message(String.valueOf(message), PrintType.Log);\r\n    }\r\n\r\n    public static void warning(String message) {\r\n        warning(message, PrintType.Log);\r\n    }\r\n    public static void warning(int message) {\r\n        warning(String.valueOf(message), PrintType.Log);\r\n    }\r\n\r\n    public static void error(String message) {\r\n        error(message, PrintType.Log);\r\n    }\r\n    public static void error(int message) { error(String.valueOf(message), PrintType.Log); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/util/Console.java b/src/util/Console.java
--- a/src/util/Console.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/util/Console.java	(date 1685741061127)
@@ -3,77 +3,117 @@
 import java.time.LocalTime;
 
 public class Console {
-    public enum PrintType {
-        Log, Audio, Game, Gui, Socket, Util, Main
+    public enum Color {
+        RESET("\u001B[0m"),
+        GREEN("\u001B[32m"),
+        YELLOW("\u001B[33m"),
+        RED("\u001B[31m"),
+        BLACK("\u001B[30m"),
+        BLUE("\u001B[34m"),
+        CYAN("\u001B[36m"),
+        PURPLE("\u001B[35m"),
+        WHITE("\u001B[37m"),
+        BRIGHT_BLACK("\u001B[90m"),
+        BRIGHT_BLUE("\u001B[94m"),
+        BRIGHT_CYAN("\u001B[96m"),
+        BRIGHT_PURPLE("\u001B[95m"),
+        BRIGHT_WHITE("\u001B[97m");
+
+        private final String code;
+
+        Color(String code) {
+            this.code = code;
+        }
+
+        public String getCode() {
+            return this.code;
+        }
+    }
+
+    public static void println(String message) {
+        System.out.println(message);
+    }
+
+    public static void print(String message) {
+        System.out.print(message);
+    }
+
+    public static void println(String message, Color color) {
+        System.out.println(color.getCode() + message + Color.RESET.getCode());
     }
 
-    private static final String ANSI_RESET = "\u001B[0m";
-    private static final String ANSI_GREEN = "\u001B[32m";
-    private static final String ANSI_YELLOW = "\u001B[33m";
-    private static final String ANSI_RED = "\u001B[31m";
-    private static final String ANSI_BLACK = "\u001B[30m";
-    private static final String ANSI_BLUE = "\u001B[34m";
-    private static final String ANSI_CYAN = "\u001B[36m";
-    private static final String ANSI_PURPLE = "\u001B[35m";
-    private static final String ANSI_WHITE = "\u001B[37m";
-    private static final String ANSI_BRIGHT_BLACK = "\u001B[90m";
-    private static final String ANSI_BRIGHT_BLUE = "\u001B[94m";
-    private static final String ANSI_BRIGHT_CYAN = "\u001B[96m";
-    private static final String ANSI_BRIGHT_PURPLE = "\u001B[95m";
-    private static final String ANSI_BRIGHT_WHITE = "\u001B[97m";
+    public static void print(String message, Color color) {
+        System.out.print(color.getCode() + message + Color.RESET.getCode());
+    }
 
     private static void printTime() {
         System.out.print("[" + LocalTime.now().toString() + "]");
     }
 
-    private static void printType(PrintType type) {
-        System.out.print("[");
-        switch (type) {
-            case Log -> System.out.print(ANSI_WHITE + " [Log] " + ANSI_RESET);
-            case Game -> System.out.print(ANSI_BRIGHT_BLUE + " [Game] " + ANSI_RESET);
-            case Audio -> System.out.print(ANSI_PURPLE + " [Audio] " + ANSI_RESET);
-            case Gui -> System.out.print(ANSI_BRIGHT_PURPLE + " [Gui] " + ANSI_RESET);
-            case Socket -> System.out.print(ANSI_CYAN + " [Socket] " + ANSI_RESET);
-            case Util -> System.out.print(ANSI_BRIGHT_BLACK + " [Util] " + ANSI_RESET);
-            default -> System.out.print(ANSI_BLUE + " [Main] " + ANSI_RESET);
-        }
-        System.out.print("]");
+    private static String getColorCode(String packageName) {
+        return switch (packageName) {
+            case "audio", "audio.sfx" -> Color.BLUE.getCode();
+            case "game", "game.users" -> Color.YELLOW.getCode();
+            case "gui", "gui.images" -> Color.PURPLE.getCode();
+            case "socket", "socket.events", "socket.packages" -> Color.CYAN.getCode();
+            case "util", "util.events" -> Color.BRIGHT_BLACK.getCode();
+            default -> Color.RED.getCode();
+        };
+    }
+
+    private static void printSender(Object sender) {
+        System.out.print("[ " + getColorCode(sender.getClass().getPackageName()) + sender.getClass().getName() + Color.RESET.getCode() + " ]");
     }
 
-    public static void message(String message, PrintType type) {
+    public static void message(String message, Object sender) {
+        printTime();
+        if (sender != null) printSender(sender);
+        print("[ MSG ]", Color.GREEN);
+        println("# " + message);
+    }
+
+    public static <T> void staticMessage(String message,T sender) {
         printTime();
-        printType(type);
-        System.out.println(ANSI_GREEN + " [MSG] " + ANSI_RESET + " #" + message);
+        if (sender != null) printSender(sender);
+        print("[ MSG ]", Color.GREEN);
+        println("# " + message);
+    }
+    public static void message(String message) {
+        message(message, null);
     }
 
-    public static void warning(String message, PrintType type) {
+    public static void warning(String message, Object sender) {
         printTime();
-        printType(type);
-        System.out.println(ANSI_YELLOW + " [WRN] " + ANSI_RESET + " #" + message);
+        if (sender != null) printSender(sender);
+        print("[ WRN ]", Color.YELLOW);
+        println("# " + message);
     }
-
-    public static void error(String message, PrintType type) {
+    public static <T> void staticWarning(String message, T sender) {
         printTime();
-        printType(type);
-        System.out.println(ANSI_RED + " [ERR] " + ANSI_RESET + " #" + message);
-    }
-
-    public static void message(String message) {
-        message(message, PrintType.Log);
-    }
-    public static void message(int message) {
-        message(String.valueOf(message), PrintType.Log);
+        if (sender != null) printSender(sender);
+        print("[ WRN ]", Color.YELLOW);
+        println("# " + message);
     }
 
     public static void warning(String message) {
-        warning(message, PrintType.Log);
+        warning(message, null);
     }
-    public static void warning(int message) {
-        warning(String.valueOf(message), PrintType.Log);
+
+    public static void error(String message, Object sender) {
+        printTime();
+        if (sender != null) printSender(sender);
+        print("[ ERR ]", Color.RED);
+        println("# " + message);
+    }
+
+    public static <T> void staticError(String message, T sender) {
+        printTime();
+        if (sender != null) printSender(sender);
+        print("[ ERR ]", Color.RED);
+        println("# " + message);
     }
 
     public static void error(String message) {
-        error(message, PrintType.Log);
+        error(message, null);
     }
-    public static void error(int message) { error(String.valueOf(message), PrintType.Log); }
 }
\ No newline at end of file
Index: src/util/events/ArgEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package util.events;\r\n\r\nimport util.Console;\r\n\r\npublic class ArgEvent<T> extends util.Array<Action<T>> {\r\n    /**\r\n     * Adds an action to the event, checking for duplicates before adding.\r\n     * If the action already exists in the list, a warning message is printed.\r\n     *\r\n     * @param action the action to add\r\n     */\r\n    @Override\r\n    public void add(Action<T> action) {\r\n        if (contains(action)) {\r\n            Console.warning(\"Action you are trying to add already exists in the list!\", Console.PrintType.Util);\r\n            return;\r\n        }\r\n        super.add(action);\r\n    }\r\n\r\n    /**\r\n     * Runs the specified action with the provided argument.\r\n     *\r\n     * @param action the action to run\r\n     * @param arg    the argument for the action\r\n     */\r\n    private void run(Action<T> action, T arg) {\r\n        action.run(arg);\r\n    }\r\n\r\n    /**\r\n     * Runs the action at the specified index with the provided argument.\r\n     *\r\n     * @param index the index of the action to run\r\n     * @param arg   the argument for the action\r\n     */\r\n    private void run(final int index, T arg) {\r\n        run(get(index), arg);\r\n    }\r\n\r\n    /**\r\n     * Runs all actions in the event with the provided argument.\r\n     *\r\n     * @param arg the argument for the actions\r\n     */\r\n    public void run(T arg) {\r\n        for (int i = 0; i < size(); i++) {\r\n            run(i, arg);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs all actions in the event with the provided argument and then clears the event.\r\n     *\r\n     * @param arg the argument for the actions\r\n     */\r\n    public void runOnce(T arg) {\r\n        run(arg);\r\n        clear();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/util/events/ArgEvent.java b/src/util/events/ArgEvent.java
--- a/src/util/events/ArgEvent.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/util/events/ArgEvent.java	(date 1685740258515)
@@ -12,7 +12,7 @@
     @Override
     public void add(Action<T> action) {
         if (contains(action)) {
-            Console.warning("Action you are trying to add already exists in the list!", Console.PrintType.Util);
+            Console.warning("Action you are trying to add already exists in the list!", this);
             return;
         }
         super.add(action);
Index: src/util/events/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package util.events;\r\n\r\nimport util.Console;\r\n\r\npublic class Event extends util.Array<Runnable> {\r\n    /**\r\n     * Adds a runnable action to the event, checking for duplicates before adding.\r\n     * If the action already exists in the list, a warning message is printed.\r\n     *\r\n     * @param action the action to add\r\n     */\r\n    @Override\r\n    public void add(Runnable action) {\r\n        if (contains(action)) {\r\n            Console.warning(\"Action you are trying to add already exists in the list!\", Console.PrintType.Util);\r\n            return;\r\n        }\r\n        super.add(action);\r\n    }\r\n\r\n    /**\r\n     * Runs the specified runnable action.\r\n     *\r\n     * @param action the action to run\r\n     */\r\n    private void run(Runnable action) {\r\n        action.run();\r\n    }\r\n\r\n    /**\r\n     * Runs the action at the specified index.\r\n     *\r\n     * @param index the index of the action to run\r\n     */\r\n    private void run(final int index) {\r\n        run(get(index));\r\n    }\r\n\r\n    /**\r\n     * Runs all actions in the event.\r\n     */\r\n    public void run() {\r\n        for (int i = 0; i < size(); i++) {\r\n            run(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Runs all actions in the event and then clears the event.\r\n     */\r\n    public void runOnce() {\r\n        run();\r\n        clear();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/util/events/Event.java b/src/util/events/Event.java
--- a/src/util/events/Event.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/util/events/Event.java	(date 1685740258520)
@@ -12,7 +12,7 @@
     @Override
     public void add(Runnable action) {
         if (contains(action)) {
-            Console.warning("Action you are trying to add already exists in the list!", Console.PrintType.Util);
+            Console.warning("Action you are trying to add already exists in the list!", this);
             return;
         }
         super.add(action);
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import audio.AudioManager;\r\nimport game.GameManager;\r\nimport gui.GuiManager;\r\nimport gui.Login;\r\nimport gui.Menu;\r\nimport socket.NetworkManager;\r\nimport socket.RoomManager;\r\nimport util.Array;\r\nimport util.Console;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        if (NetworkManager.isMaster()) {\r\n            //Initializing Server\r\n            util.Console.message(\"No active Master Server.Initializing Master Server.\", Console.PrintType.Main);\r\n            RoomManager.initialize();\r\n            NetworkManager.initialize();\r\n        } else {\r\n            //Initializing Client\r\n            util.Console.message(\"Initializing Client.\", Console.PrintType.Main);\r\n            AudioManager.initialize();\r\n            GameManager.initialize();\r\n\r\n            GuiManager.initialize();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/Main.java	(date 1685740280866)
@@ -15,12 +15,12 @@
     public static void main(String[] args) {
         if (NetworkManager.isMaster()) {
             //Initializing Server
-            util.Console.message("No active Master Server.Initializing Master Server.", Console.PrintType.Main);
+            util.Console.message("No active Master Server.Initializing Master Server.",null);
             RoomManager.initialize();
             NetworkManager.initialize();
         } else {
             //Initializing Client
-            util.Console.message("Initializing Client.", Console.PrintType.Main);
+            util.Console.message("Initializing Client.", null);
             AudioManager.initialize();
             GameManager.initialize();
 
Index: src/gui/Login.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gui;\r\n\r\nimport util.Console;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class Login extends Window implements ActionListener {\r\n    public Login() {\r\n        super(\"Login\");\r\n        createUserInterface();\r\n    }\r\n\r\n    TextField usernameField;\r\n    JPasswordField passwordField;\r\n\r\n    private void createUserInterface() {\r\n\r\n        setLayout(null);\r\n\r\n        final int SPACING = 30;\r\n\r\n        int x = 130;\r\n        int y = 70;\r\n\r\n        JLabel label = new JLabel(\"LOGIN\");\r\n        label.setBounds(x, y, 120, 20);\r\n        label.setForeground(Color.WHITE);\r\n\r\n        add(label);\r\n        y += SPACING;\r\n\r\n        label = new JLabel(\"Username:\");\r\n        label.setBounds(x, y, 120, 20);\r\n        label.setForeground(Color.WHITE);\r\n\r\n        add(label);\r\n        y += SPACING - 10;\r\n\r\n        usernameField = new TextField();\r\n        usernameField.setBounds(x, y, 120, 20);\r\n\r\n        add(usernameField);\r\n        y += SPACING;\r\n\r\n        label = new JLabel(\"Password:\");\r\n        label.setBounds(x, y, 120, 20);\r\n        label.setForeground(Color.WHITE);\r\n\r\n        add(label);\r\n        y += SPACING - 10;\r\n\r\n        passwordField = new JPasswordField();\r\n        passwordField.setBounds(x, y, 120, 20);\r\n\r\n        add(passwordField);\r\n        y += SPACING;\r\n\r\n        JButton loginButton = new JButton(\"Login\");\r\n        loginButton.setBounds(x, y, 120, 20);\r\n        loginButton.addActionListener(this);\r\n\r\n        add(loginButton);\r\n        y += SPACING;\r\n\r\n        JButton registerButton = new JButton(\"Register\");\r\n        registerButton.setBounds(x, y, 120, 20);\r\n        registerButton.addActionListener(e -> {\r\n            this.hideWindow();\r\n            GuiManager.instance.getRegisterWindow().showWindow();\r\n        });\r\n\r\n        add(registerButton);\r\n        y += SPACING;\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n        String userName = usernameField.getText();\r\n        String password = new String(passwordField.getPassword());\r\n\r\n        if (game.users.User.login(userName, password)) {\r\n            util.Console.message(\"Valid User\", Console.PrintType.Gui);\r\n\r\n            usernameField.setText(\"\");\r\n            passwordField.setText(\"\");\r\n\r\n            GuiManager.instance.loggedIn();\r\n        } else {\r\n            usernameField.setText(\"\");\r\n            passwordField.setText(\"\");\r\n\r\n            JOptionPane.showMessageDialog(null, \"Invalid Username/Password! Try again.\", \"User Validation\", JOptionPane.ERROR_MESSAGE);\r\n\r\n            util.Console.warning(\"Invalid User!\", Console.PrintType.Gui);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/gui/Login.java b/src/gui/Login.java
--- a/src/gui/Login.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/gui/Login.java	(date 1685739916517)
@@ -83,7 +83,7 @@
         String password = new String(passwordField.getPassword());
 
         if (game.users.User.login(userName, password)) {
-            util.Console.message("Valid User", Console.PrintType.Gui);
+            util.Console.message("Valid User", this);
 
             usernameField.setText("");
             passwordField.setText("");
@@ -95,7 +95,7 @@
 
             JOptionPane.showMessageDialog(null, "Invalid Username/Password! Try again.", "User Validation", JOptionPane.ERROR_MESSAGE);
 
-            util.Console.warning("Invalid User!", Console.PrintType.Gui);
+            util.Console.warning("Invalid User!", this);
         }
     }
 }
\ No newline at end of file
Index: src/audio/AudioManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package audio;\r\n\r\nimport game.Board;\r\nimport game.Piece;\r\nimport util.Array;\r\nimport util.Console;\r\n\r\npublic class AudioManager {\r\n    /**\r\n     * Represents the singleton instance of the AudioManager.\r\n     */\r\n    public static AudioManager instance;\r\n\r\n    /**\r\n     * Initializes the AudioManager by loading audio clips and creating the instance.\r\n     */\r\n    public static void initialize() {\r\n        util.Console.message(\"Initializing AudioManager.\", Console.PrintType.Main);\r\n\r\n        if (instance == null)\r\n            instance = new AudioManager();\r\n\r\n        final String[] FILE_PATHS = {\r\n                \"src/audio/sfx/capture.wav\",\r\n                \"src/audio/sfx/end.wav\",\r\n                \"src/audio/sfx/move.wav\",\r\n                \"src/audio/sfx/start.wav\"\r\n        };\r\n        try {\r\n            for (String path : FILE_PATHS) {\r\n                clips.add(new AudioClip(path));\r\n            }\r\n        } catch (Exception ex) {\r\n            util.Console.error(\"Failed to load sfx!\", Console.PrintType.Audio);\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Holds an array of audio clips.\r\n     */\r\n    public static final Array<AudioClip> clips = new Array<>();\r\n\r\n    /**\r\n     * Finds and retrieves an audio clip from the clips array based on the specified index.\r\n     *\r\n     * @param index the index of the audio clip\r\n     * @return the audio clip at the specified index, or null if not found\r\n     */\r\n    public static AudioClip findClip(final int index) {\r\n        return clips.get(index);\r\n    }\r\n\r\n    /**\r\n     * Finds and retrieves an audio clip from the clips array based on the specified name.\r\n     *\r\n     * @param name the name of the audio clip\r\n     * @return the audio clip with the specified name, or null if not found\r\n     */\r\n    public static AudioClip findClip(final String name) {\r\n        for (int i = 0; i < clips.size(); i++) {\r\n            if (clips.get(i).getName().equals(name)) {\r\n                return clips.get(i);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Plays the audio clip at the specified index.\r\n     *\r\n     * @param index the index of the audio clip to play\r\n     */\r\n    public static void playClip(final int index) {\r\n        AudioClip clip = findClip(index);\r\n        if (clip == null) {\r\n            util.Console.error(\"Failed to play AudioClip : \" + index, Console.PrintType.Audio);\r\n            throw new NullPointerException();\r\n        }\r\n        clip.play();\r\n    }\r\n\r\n    /**\r\n     * Plays the audio clip with the specified name.\r\n     *\r\n     * @param name the name of the audio clip to play\r\n     */\r\n    public static void playClip(final String name) {\r\n        AudioClip clip = findClip(name);\r\n        if (clip == null) {\r\n            util.Console.error(\"Failed to play AudioClip : \" + name, Console.PrintType.Audio);\r\n            throw new NullPointerException();\r\n        }\r\n\r\n        clip.play();\r\n    }\r\n\r\n    /**\r\n     * Constructs an AudioManager object and subscribes to events on the Board class.\r\n     */\r\n    public AudioManager() {\r\n        Board.instance.onPieceEaten.add(this::onPieceEaten);\r\n        Board.instance.onPieceMoved.add(this::onPieceMoved);\r\n    }\r\n\r\n    /**\r\n     * Plays the capture sound effect when a piece is eaten.\r\n     *\r\n     * @param piece the piece that was eaten\r\n     */\r\n    private void onPieceEaten(Piece piece) {\r\n        playClip(0);\r\n    }\r\n\r\n    /**\r\n     * Plays the move sound effect when a piece is moved.\r\n     *\r\n     * @param piece the piece that was moved\r\n     */\r\n    private void onPieceMoved(Piece piece) {\r\n        playClip(2);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/audio/AudioManager.java b/src/audio/AudioManager.java
--- a/src/audio/AudioManager.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/audio/AudioManager.java	(date 1685739738910)
@@ -15,11 +15,12 @@
      * Initializes the AudioManager by loading audio clips and creating the instance.
      */
     public static void initialize() {
-        util.Console.message("Initializing AudioManager.", Console.PrintType.Main);
 
         if (instance == null)
             instance = new AudioManager();
 
+        util.Console.message("Initializing AudioManager.",instance);
+
         final String[] FILE_PATHS = {
                 "src/audio/sfx/capture.wav",
                 "src/audio/sfx/end.wav",
@@ -31,7 +32,7 @@
                 clips.add(new AudioClip(path));
             }
         } catch (Exception ex) {
-            util.Console.error("Failed to load sfx!", Console.PrintType.Audio);
+            util.Console.error("Failed to load sfx!",instance);
             ex.printStackTrace();
         }
     }
@@ -74,7 +75,7 @@
     public static void playClip(final int index) {
         AudioClip clip = findClip(index);
         if (clip == null) {
-            util.Console.error("Failed to play AudioClip : " + index, Console.PrintType.Audio);
+            util.Console.error("Failed to play AudioClip : " + index, instance);
             throw new NullPointerException();
         }
         clip.play();
@@ -88,7 +89,7 @@
     public static void playClip(final String name) {
         AudioClip clip = findClip(name);
         if (clip == null) {
-            util.Console.error("Failed to play AudioClip : " + name, Console.PrintType.Audio);
+            util.Console.error("Failed to play AudioClip : " + name, instance);
             throw new NullPointerException();
         }
 
Index: src/audio/AudioClip.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package audio;\r\n\r\nimport util.Console;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\nimport javax.sound.sampled.AudioSystem;\r\nimport javax.sound.sampled.Clip;\r\n\r\npublic class AudioClip {\r\n    /**\r\n     * Represents the name of the audio clip.\r\n     */\r\n    private String name;\r\n\r\n    /**\r\n     * Represents the Clip object that holds the audio data.\r\n     */\r\n    private Clip clip;\r\n\r\n    /**\r\n     * Retrieves the Clip object of the audio clip.\r\n     *\r\n     * @return the Clip object of the audio clip\r\n     */\r\n    public final Clip getClip() {\r\n        return this.clip;\r\n    }\r\n\r\n    /**\r\n     * Retrieves the name of the audio clip.\r\n     *\r\n     * @return the name of the audio clip\r\n     */\r\n    public final String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the audio clip.\r\n     *\r\n     * @param name the name of the audio clip\r\n     */\r\n    public void setName(final String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Checks if the audio clip is currently running.\r\n     *\r\n     * @return true if the audio clip is running, false otherwise\r\n     */\r\n    public final boolean isRunning() {\r\n        return this.clip != null && this.clip.isRunning();\r\n    }\r\n\r\n    /**\r\n     * Constructs an AudioClip object with the specified file name.\r\n     *\r\n     * @param fileName the name of the audio file\r\n     */\r\n    public AudioClip(String fileName) {\r\n        load(fileName);\r\n    }\r\n\r\n    /**\r\n     * Loads the audio file and initializes the Clip object.\r\n     *\r\n     * @param fileName the name of the audio file\r\n     */\r\n    private void load(String fileName) {\r\n        util.Console.message(\"Loading new AudioClip : \" + fileName, Console.PrintType.Audio);\r\n        this.clip = null;\r\n\r\n        try {\r\n            File file = new File(fileName);\r\n            this.name = file.getName();\r\n\r\n            this.clip = AudioSystem.getClip();\r\n            this.clip.open(AudioSystem.getAudioInputStream(file));\r\n        } catch (Exception ex) {\r\n            util.Console.error(\"Failed to load new AudioClip : \" + fileName, Console.PrintType.Audio);\r\n            ex.printStackTrace();\r\n        }\r\n        util.Console.message(\"AudioClip loaded : \" + this.name, Console.PrintType.Audio);\r\n    }\r\n\r\n    /**\r\n     * Plays the audio clip.\r\n     * If the audio clip is already playing, it will be stopped and restarted.\r\n     */\r\n    public void play() {\r\n        if (this.clip == null) {\r\n            util.Console.error(\"Failed to play AudioClip\", Console.PrintType.Audio);\r\n            throw new NullPointerException();\r\n        }\r\n\r\n        stop();\r\n\r\n        restart();\r\n\r\n        this.clip.start();\r\n    }\r\n\r\n    /**\r\n     * Stops the audio clip if it is currently running.\r\n     */\r\n    public void stop() {\r\n        if (!isRunning()) {\r\n            util.Console.warning(\"Trying to stop already stopped AudioClip\", Console.PrintType.Audio);\r\n            return;\r\n        }\r\n\r\n        this.clip.stop();\r\n    }\r\n\r\n    /**\r\n     * Restarts the audio clip by setting its frame position to 0.\r\n     */\r\n    public void restart() {\r\n        if (this.clip == null) {\r\n            util.Console.error(\"Trying to restart non existing clip\", Console.PrintType.Audio);\r\n            throw new NullPointerException();\r\n        }\r\n\r\n        this.clip.setFramePosition(0);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/audio/AudioClip.java b/src/audio/AudioClip.java
--- a/src/audio/AudioClip.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/audio/AudioClip.java	(date 1685739387309)
@@ -70,7 +70,7 @@
      * @param fileName the name of the audio file
      */
     private void load(String fileName) {
-        util.Console.message("Loading new AudioClip : " + fileName, Console.PrintType.Audio);
+        util.Console.message("Loading new AudioClip : " + fileName, this);
         this.clip = null;
 
         try {
@@ -80,10 +80,10 @@
             this.clip = AudioSystem.getClip();
             this.clip.open(AudioSystem.getAudioInputStream(file));
         } catch (Exception ex) {
-            util.Console.error("Failed to load new AudioClip : " + fileName, Console.PrintType.Audio);
+            util.Console.error("Failed to load new AudioClip : " + fileName, this);
             ex.printStackTrace();
         }
-        util.Console.message("AudioClip loaded : " + this.name, Console.PrintType.Audio);
+        util.Console.message("AudioClip loaded : " + this.name,this);
     }
 
     /**
@@ -92,7 +92,7 @@
      */
     public void play() {
         if (this.clip == null) {
-            util.Console.error("Failed to play AudioClip", Console.PrintType.Audio);
+            util.Console.error("Failed to play AudioClip", this);
             throw new NullPointerException();
         }
 
@@ -108,7 +108,7 @@
      */
     public void stop() {
         if (!isRunning()) {
-            util.Console.warning("Trying to stop already stopped AudioClip", Console.PrintType.Audio);
+            util.Console.warning("Trying to stop already stopped AudioClip", this);
             return;
         }
 
@@ -120,7 +120,7 @@
      */
     public void restart() {
         if (this.clip == null) {
-            util.Console.error("Trying to restart non existing clip", Console.PrintType.Audio);
+            util.Console.error("Trying to restart non existing clip", this);
             throw new NullPointerException();
         }
 
Index: src/gui/images/Image.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gui.images;\r\n\r\nimport util.Console;\r\n\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\nimport javax.imageio.ImageIO;\r\n\r\npublic class Image {\r\n\r\n    public static final Image[][] IMAGES = {\r\n            {\r\n                    new Image(\"src/gui/images/256px/w_rook_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/w_knight_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/w_bishop_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/w_queen_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/w_king_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/w_pawn_png_shadow_256px.png\")\r\n            },\r\n            {\r\n                    new Image(\"src/gui/images/256px/b_rook_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/b_knight_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/b_bishop_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/b_queen_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/b_king_png_shadow_256px.png\"),\r\n                    new Image(\"src/gui/images/256px/b_pawn_png_shadow_256px.png\")\r\n            }\r\n    };\r\n    public  static  void wakeUp() {\r\n        return;\r\n    }\r\n\r\n    private BufferedImage image;\r\n\r\n    public BufferedImage getImage() {\r\n        return this.image;\r\n    }\r\n\r\n    private void load(final String path) {\r\n        util.Console.message(\"Loading new Image : \" + path, Console.PrintType.Gui);\r\n\r\n        File file = new File(path);\r\n        try {\r\n            this.image = ImageIO.read(file);\r\n        } catch (IOException ex) {\r\n            util.Console.error(\"Failed to load new Image : \" + path, Console.PrintType.Gui);\r\n            ex.printStackTrace();\r\n        }\r\n        util.Console.message(\"Image loaded : \" + file.getName(), Console.PrintType.Gui);\r\n    }\r\n\r\n    public Image(String path) {\r\n        load(path);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/gui/images/Image.java b/src/gui/images/Image.java
--- a/src/gui/images/Image.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/gui/images/Image.java	(date 1685739808978)
@@ -39,16 +39,16 @@
     }
 
     private void load(final String path) {
-        util.Console.message("Loading new Image : " + path, Console.PrintType.Gui);
+        util.Console.message("Loading new Image : " + path, this);
 
         File file = new File(path);
         try {
             this.image = ImageIO.read(file);
         } catch (IOException ex) {
-            util.Console.error("Failed to load new Image : " + path, Console.PrintType.Gui);
+            util.Console.error("Failed to load new Image : " + path, this);
             ex.printStackTrace();
         }
-        util.Console.message("Image loaded : " + file.getName(), Console.PrintType.Gui);
+        util.Console.message("Image loaded : " + file.getName(), this);
     }
 
     public Image(String path) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"0026f5f2-a006-4a9c-9f3f-a83d0059bec4\" name=\"Changes\" comment=\"Fixed\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/gui/Register.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_1_2023_8_47_PM__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_1_2023_8_47_PM__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/game/users/User.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/game/users/User.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/game/users/UserData\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/game/users/UserData\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/gui/Game.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/gui/Game.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/gui/GuiManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/gui/GuiManager.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/gui/Login.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/gui/Login.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/gui/Menu.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/gui/Menu.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2QMoiVsCVgGjgSev7aJ1d5PId8K\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <OptionsSetting value=\"false\" id=\"Update\" />\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"Downloaded.Files.Path.Enabled\": \"false\",\r\n    \"Repository.Attach.Annotations\": \"false\",\r\n    \"Repository.Attach.JavaDocs\": \"false\",\r\n    \"Repository.Attach.Sources\": \"false\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"jdk.selected.JAVA_MODULE\": \"12\",\r\n    \"last_opened_file_path\": \"C:/Users/Aleksa/Desktop/CS120-IspitnaPitanja.docx\",\r\n    \"onboarding.tips.debug.path\": \"C:/Users/Aleksa/IdeaProjects/OnlineChess/src/Main.java\",\r\n    \"project.structure.last.edited\": \"Project\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"run.code.analysis.last.selected.profile\": \"pProject Default\",\r\n    \"settings.editor.selected.configurable\": \"preferences.keymap\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Aleksa\\IdeaProjects\\OnlineChess\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" singleton=\"false\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"OnlineChess\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"0026f5f2-a006-4a9c-9f3f-a83d0059bec4\" name=\"Changes\" comment=\"\" />\r\n      <created>1685172942860</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1685172942860</updated>\r\n      <workItem from=\"1685305074441\" duration=\"15046000\" />\r\n      <workItem from=\"1685364113165\" duration=\"384000\" />\r\n      <workItem from=\"1685364512410\" duration=\"58000\" />\r\n      <workItem from=\"1685364581139\" duration=\"3526000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Setup\">\r\n      <created>1685172992366</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685172992366</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Server/Client setup\">\r\n      <created>1685269788259</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685269788259</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Server/Client setup\">\r\n      <created>1685274797705</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685274797705</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Server/Client setup\">\r\n      <created>1685275832983</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685275832983</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Server/Client setup\">\r\n      <created>1685275988816</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685275988816</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Quick Fix\">\r\n      <created>1685276024887</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685276024887</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Quick Fix\">\r\n      <created>1685277126581</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685277126581</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Foreach in Array\">\r\n      <created>1685371437023</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685371437023</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Foreach in Array\">\r\n      <created>1685379051695</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685379051695</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Foreach in Array\">\r\n      <created>1685380334047</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685380334047</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"Game GUI\">\r\n      <created>1685384925452</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685384925452</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Game GUI\">\r\n      <created>1685386881575</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685386881575</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Board Initialization\">\r\n      <created>1685390526513</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685390526513</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Pieces Move\">\r\n      <created>1685392740090</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685392740090</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"QuickFix\">\r\n      <created>1685395325023</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685395325024</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"QuickFix\">\r\n      <created>1685395942872</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685395942872</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"QuickFix\">\r\n      <created>1685435834634</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685435834634</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Fixed\">\r\n      <created>1685436366774</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685436366774</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Added Fixed Movement\">\r\n      <created>1685458352412</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685458352412</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Added Fixed Movement\">\r\n      <created>1685514249595</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685514249595</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Main Fix\">\r\n      <created>1685601250344</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685601250344</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Fixed\">\r\n      <created>1685607165596</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685607165596</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Fixed\">\r\n      <created>1685607183694</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685607183694</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"24\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Setup\" />\r\n    <MESSAGE value=\"Server/Client setup\" />\r\n    <MESSAGE value=\"Quick Fix\" />\r\n    <MESSAGE value=\"Editing users\" />\r\n    <MESSAGE value=\"Foreach in Array\" />\r\n    <MESSAGE value=\"Game GUI\" />\r\n    <MESSAGE value=\"Board Initialization\" />\r\n    <MESSAGE value=\"Pieces Move\" />\r\n    <MESSAGE value=\"QuickFix\" />\r\n    <MESSAGE value=\"Added Fixed Movement\" />\r\n    <MESSAGE value=\"Main Fix\" />\r\n    <MESSAGE value=\"Fixed\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Fixed\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/OnlineChess$Main.ic\" NAME=\"Main Coverage Results\" MODIFIED=\"1685403185032\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/.idea/workspace.xml	(date 1685740280905)
@@ -4,17 +4,27 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="0026f5f2-a006-4a9c-9f3f-a83d0059bec4" name="Changes" comment="Fixed">
-      <change afterPath="$PROJECT_DIR$/src/gui/Register.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_1_2023_8_47_PM__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_6_1_2023_8_47_PM__Changes_.xml" afterDir="false" />
+    <list default="true" id="0026f5f2-a006-4a9c-9f3f-a83d0059bec4" name="Changes" comment="Quick Fixes">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/game/users/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/game/users/User.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/game/users/UserData" beforeDir="false" afterPath="$PROJECT_DIR$/src/game/users/UserData" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/gui/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/gui/Game.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/audio/AudioClip.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/audio/AudioClip.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/audio/AudioManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/audio/AudioManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/game/GameManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/game/GameManager.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/gui/GuiManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/gui/GuiManager.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/gui/Login.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/gui/Login.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/gui/Menu.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/gui/Menu.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/gui/Register.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/gui/Register.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/gui/images/Image.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/gui/images/Image.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/socket/LocalClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/socket/LocalClient.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/socket/NetworkManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/socket/NetworkManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/socket/RoomManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/socket/RoomManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/socket/Server.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/socket/Server.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/socket/ServerClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/socket/ServerClient.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/socket/ServerRoom.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/socket/ServerRoom.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/socket/events/ServerEventHandler.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/socket/events/ServerEventHandler.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/socket/packages/Stream.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/socket/packages/Stream.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/util/Console.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/util/Console.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/util/events/ArgEvent.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/util/events/ArgEvent.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/util/events/Event.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/util/events/Event.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -47,29 +57,29 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "ASKED_ADD_EXTERNAL_FILES": "true",
-    "Downloaded.Files.Path.Enabled": "false",
-    "Repository.Attach.Annotations": "false",
-    "Repository.Attach.JavaDocs": "false",
-    "Repository.Attach.Sources": "false",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "git-widget-placeholder": "master",
-    "ignore.virus.scanning.warn.message": "true",
-    "jdk.selected.JAVA_MODULE": "12",
-    "last_opened_file_path": "C:/Users/Aleksa/Desktop/CS120-IspitnaPitanja.docx",
-    "onboarding.tips.debug.path": "C:/Users/Aleksa/IdeaProjects/OnlineChess/src/Main.java",
-    "project.structure.last.edited": "Project",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.2",
-    "run.code.analysis.last.selected.profile": "pProject Default",
-    "settings.editor.selected.configurable": "preferences.keymap"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
+    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
+    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
+    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
+    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;jdk.selected.JAVA_MODULE&quot;: &quot;12&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Aleksa/Desktop/CS120-IspitnaPitanja.docx&quot;,
+    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/Aleksa/IdeaProjects/OnlineChess/src/Main.java&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.keymap&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="MoveFile.RECENT_KEYS">
       <recent name="C:\Users\Aleksa\IdeaProjects\OnlineChess\src" />
@@ -258,7 +268,14 @@
       <option name="project" value="LOCAL" />
       <updated>1685607183694</updated>
     </task>
-    <option name="localTasksCounter" value="24" />
+    <task id="LOCAL-00024" summary="Quick Fixes">
+      <created>1685738194427</created>
+      <option name="number" value="00024" />
+      <option name="presentableId" value="LOCAL-00024" />
+      <option name="project" value="LOCAL" />
+      <updated>1685738194427</updated>
+    </task>
+    <option name="localTasksCounter" value="25" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -289,7 +306,8 @@
     <MESSAGE value="Added Fixed Movement" />
     <MESSAGE value="Main Fix" />
     <MESSAGE value="Fixed" />
-    <option name="LAST_COMMIT_MESSAGE" value="Fixed" />
+    <MESSAGE value="Quick Fixes" />
+    <option name="LAST_COMMIT_MESSAGE" value="Quick Fixes" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/OnlineChess$Main.ic" NAME="Main Coverage Results" MODIFIED="1685403185032" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
Index: src/socket/LocalClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package socket;\r\n\r\nimport game.GameManager;\r\nimport socket.packages.Packet;\r\nimport util.Console;\r\n\r\nimport java.net.Socket;\r\n\r\npublic class LocalClient extends Client implements Runnable {\r\n    public static final String IP_ADDER = \"localhost\";\r\n    public static LocalClient instance;\r\n\r\n    public static void connect() {\r\n        util.Console.message(\"Trying to connect LocalClient\", Console.PrintType.Socket);\r\n        if (instance != null) {\r\n            util.Console.error(\"Failed to connect LocalClient.LocalClient is already connected!\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            instance = new LocalClient(new Socket(IP_ADDER, Server.PORT));\r\n        } catch (Exception ex) {\r\n            util.Console.error(\"Failed to connect LocalClient!\", Console.PrintType.Socket);\r\n            ex.printStackTrace();\r\n        }\r\n        util.Console.message(\"LocalClient connected to PORT : \" + Server.PORT + \" with address : \" + IP_ADDER, Console.PrintType.Socket);\r\n    }\r\n\r\n    public static void disconnect() {\r\n        util.Console.message(\"Trying to disconnect LocalClient\", Console.PrintType.Socket);\r\n        if (instance == null) {\r\n            util.Console.warning(\"Failed to disconnect LocalClient.LocalClient is not connected!\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            instance.send(new Packet(\"\",Packet.Type.DISCONNECT));\r\n            instance.getSocket().close();\r\n            instance = null;\r\n        } catch (Exception ex) {\r\n            util.Console.error(\"Failed to disconnect LocalClient!\", Console.PrintType.Socket);\r\n            ex.printStackTrace();\r\n        }\r\n        util.Console.message(\"LocalClient disconnected\", Console.PrintType.Socket);\r\n    }\r\n\r\n    public LocalClient(Socket socket) {\r\n        super(socket);\r\n        Thread listeningThread = new Thread(this);\r\n        listeningThread.start();\r\n    }\r\n\r\n    private Packet packet = new Packet(\"\");\r\n\r\n    @Override\r\n    public void run() {\r\n\r\n        if (getSocket().isClosed()) {\r\n            util.Console.error(\"LocalClient Socket is closed!\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        util.Console.message(\"LocalClient started listening\", Console.PrintType.Socket);\r\n        do {\r\n            this.packet = receive(this.packet);\r\n        } while (handlePacket());\r\n        util.Console.message(\"LocalClient stopped listening\", Console.PrintType.Socket);\r\n    }\r\n\r\n    private boolean handlePacket() {\r\n        Console.message(\"LocalClient received packet from Server\", Console.PrintType.Socket);\r\n        GameManager.instance.handleNetworkPackage(packet);\r\n        return true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/socket/LocalClient.java b/src/socket/LocalClient.java
--- a/src/socket/LocalClient.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/socket/LocalClient.java	(date 1685740071035)
@@ -11,37 +11,37 @@
     public static LocalClient instance;
 
     public static void connect() {
-        util.Console.message("Trying to connect LocalClient", Console.PrintType.Socket);
+        util.Console.message("Trying to connect LocalClient", instance);
         if (instance != null) {
-            util.Console.error("Failed to connect LocalClient.LocalClient is already connected!", Console.PrintType.Socket);
+            util.Console.error("Failed to connect LocalClient.LocalClient is already connected!", instance);
             return;
         }
 
         try {
             instance = new LocalClient(new Socket(IP_ADDER, Server.PORT));
         } catch (Exception ex) {
-            util.Console.error("Failed to connect LocalClient!", Console.PrintType.Socket);
+            util.Console.error("Failed to connect LocalClient!", instance);
             ex.printStackTrace();
         }
-        util.Console.message("LocalClient connected to PORT : " + Server.PORT + " with address : " + IP_ADDER, Console.PrintType.Socket);
+        util.Console.message("LocalClient connected to PORT : " + Server.PORT + " with address : " + IP_ADDER, instance);
     }
 
     public static void disconnect() {
-        util.Console.message("Trying to disconnect LocalClient", Console.PrintType.Socket);
+        util.Console.message("Trying to disconnect LocalClient", instance);
         if (instance == null) {
-            util.Console.warning("Failed to disconnect LocalClient.LocalClient is not connected!", Console.PrintType.Socket);
+            util.Console.warning("Failed to disconnect LocalClient.LocalClient is not connected!", null);
             return;
         }
 
         try {
-            instance.send(new Packet("",Packet.Type.DISCONNECT));
+            instance.send(new Packet("", Packet.Type.DISCONNECT));
             instance.getSocket().close();
             instance = null;
         } catch (Exception ex) {
-            util.Console.error("Failed to disconnect LocalClient!", Console.PrintType.Socket);
+            util.Console.error("Failed to disconnect LocalClient!", instance);
             ex.printStackTrace();
         }
-        util.Console.message("LocalClient disconnected", Console.PrintType.Socket);
+        util.Console.message("LocalClient disconnected", instance);
     }
 
     public LocalClient(Socket socket) {
@@ -56,19 +56,19 @@
     public void run() {
 
         if (getSocket().isClosed()) {
-            util.Console.error("LocalClient Socket is closed!", Console.PrintType.Socket);
+            util.Console.error("LocalClient Socket is closed!", this);
             return;
         }
 
-        util.Console.message("LocalClient started listening", Console.PrintType.Socket);
+        util.Console.message("LocalClient started listening", this);
         do {
             this.packet = receive(this.packet);
         } while (handlePacket());
-        util.Console.message("LocalClient stopped listening", Console.PrintType.Socket);
+        util.Console.message("LocalClient stopped listening", this);
     }
 
     private boolean handlePacket() {
-        Console.message("LocalClient received packet from Server", Console.PrintType.Socket);
+        Console.message("LocalClient received packet from Server", this);
         GameManager.instance.handleNetworkPackage(packet);
         return true;
     }
Index: src/gui/Register.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gui;\r\n\r\nimport util.Console;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.IOException;\r\n\r\npublic class Register extends Window implements ActionListener {\r\n    public Register() {\r\n        super(\"Register\");\r\n        createUserInterface();\r\n    }\r\n\r\n    TextField usernameField;\r\n    JPasswordField passwordField;\r\n\r\n    private void createUserInterface() {\r\n        setLayout(null);\r\n        final int SPACING = 30;\r\n        int x = 130;\r\n        int y = 100;\r\n\r\n        JLabel label = new JLabel(\"Register\");\r\n\r\n        label.setBounds(x, y, 120, 20);\r\n        label.setForeground(Color.WHITE);\r\n\r\n        add(label);\r\n        y += SPACING;\r\n\r\n        label = new JLabel(\"Username:\");\r\n\r\n        label.setBounds(x, y, 120, 20);\r\n        label.setForeground(Color.WHITE);\r\n\r\n        add(label);\r\n        y += SPACING - 10;\r\n\r\n        usernameField = new TextField();\r\n\r\n        usernameField.setBounds(x, y, 120, 20);\r\n\r\n        add(usernameField);\r\n        y += SPACING;\r\n\r\n        label = new JLabel(\"Password:\");\r\n\r\n        label.setBounds(x, y, 120, 20);\r\n        label.setForeground(Color.WHITE);\r\n\r\n        add(label);\r\n        y += SPACING - 10;\r\n\r\n        passwordField = new JPasswordField();\r\n\r\n        passwordField.setBounds(x, y, 120, 20);\r\n\r\n        add(passwordField);\r\n        y += SPACING;\r\n\r\n        JButton button = new JButton(\"Register\");\r\n\r\n        button.setBounds(x, y, 120, 20);\r\n        button.addActionListener(this);\r\n\r\n        add(button);\r\n    }\r\n\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n        String userName = usernameField.getText();\r\n        String password = new String(passwordField.getPassword());\r\n\r\n        try {\r\n            if (game.users.User.addUser(userName, password)) {\r\n                util.Console.message(\"User registered!\", Console.PrintType.Gui);\r\n\r\n                usernameField.setText(\"\");\r\n                passwordField.setText(\"\");\r\n\r\n                GuiManager.instance.registered();\r\n            } else {\r\n                usernameField.setText(\"\");\r\n                passwordField.setText(\"\");\r\n\r\n                JOptionPane.showMessageDialog(null, \"Username taken! Try again.\", \"User Validation\", JOptionPane.ERROR_MESSAGE);\r\n\r\n                util.Console.warning(\"User already exist!\", Console.PrintType.Gui);\r\n            }\r\n        } catch (IOException ignored) {\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/gui/Register.java b/src/gui/Register.java
--- a/src/gui/Register.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/gui/Register.java	(date 1685739931687)
@@ -77,7 +77,7 @@
 
         try {
             if (game.users.User.addUser(userName, password)) {
-                util.Console.message("User registered!", Console.PrintType.Gui);
+                util.Console.message("User registered!", this);
 
                 usernameField.setText("");
                 passwordField.setText("");
@@ -89,7 +89,7 @@
 
                 JOptionPane.showMessageDialog(null, "Username taken! Try again.", "User Validation", JOptionPane.ERROR_MESSAGE);
 
-                util.Console.warning("User already exist!", Console.PrintType.Gui);
+                util.Console.warning("User already exist!", this);
             }
         } catch (IOException ignored) {
         }
Index: src/game/GameManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game;\r\n\r\nimport audio.AudioManager;\r\nimport game.users.User;\r\nimport gui.Game;\r\nimport gui.GuiManager;\r\nimport gui.images.Field;\r\nimport socket.packages.Packet;\r\nimport util.Console;\r\nimport util.Vector;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class GameManager {\r\n    public static GameManager instance;\r\n\r\n    public static void initialize() {\r\n        util.Console.message(\"Initializing GameManager.\", Console.PrintType.Main);\r\n\r\n        if (instance == null)\r\n            instance = new GameManager();\r\n\r\n        try {\r\n            User.loadUsers();\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public GameManager() {\r\n        Field.onFieldClicked.add(this::onFieldClicked);\r\n\r\n        Board.instance.onPieceMoved.add(this::onPieceMoved);\r\n        Board.instance.onPieceEaten.add(this::onPieceEaten);\r\n    }\r\n\r\n    private int blackScore,whiteScore;\r\n    public int getBlackScore(){\r\n        return blackScore;\r\n    }\r\n    public  int getWhiteScore() {\r\n        return whiteScore;\r\n    }\r\n    final int[] PIECE_SCORES = {\r\n            5, 3, 3, 9, 0, 1\r\n    };\r\n\r\n    private void onPieceEaten(Piece piece) {\r\n        if (piece.isColor(Piece.Color.White)) {\r\n            whiteScore -= PIECE_SCORES[piece.getTypeCode() - 1];\r\n        } else {\r\n            blackScore -= PIECE_SCORES[piece.getTypeCode() - 1];\r\n        }\r\n    }\r\n\r\n    public void newGame() {\r\n        Board.instance.reset();\r\n        GuiManager.instance.startGame();\r\n\r\n        blackScore = 39;\r\n        whiteScore = 39;\r\n        //TODO:TELL AUDIO MANAGER TO PLAY SOUND\r\n    }\r\n\r\n    private void onPieceMoved(Piece piece) {\r\n        nextTurn();\r\n\r\n        if (Board.instance.isCheckmate(Piece.Color.White)) {\r\n            System.out.println(\"WHITE IN CHECKMATE\");\r\n            //TODO:ENDGAME\r\n        } else {\r\n            if (Board.instance.isCheck(Piece.Color.White)) {\r\n                System.out.println(\"WHITE IN CHECK\");\r\n            }\r\n\r\n            if (Board.instance.isCheckmate(Piece.Color.Black)) {\r\n                System.out.println(\"BLACK IN CHECKMATE\");\r\n                //TODO:ENDGAME\r\n            } else {\r\n                if (Board.instance.isCheck(Piece.Color.Black)) {\r\n                    System.out.println(\"BLACK IN CHECK\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean white = true;\r\n\r\n    public void changeColor() {\r\n        this.white = !this.white;\r\n    }\r\n\r\n    public boolean isWhite() {\r\n        return this.white;\r\n    }\r\n\r\n    private boolean whiteTurn = true;\r\n\r\n    public boolean isWhiteTurn() {\r\n        return this.whiteTurn;\r\n    }\r\n\r\n    public void nextTurn() {\r\n        whiteTurn = !whiteTurn;\r\n    }\r\n\r\n    public boolean canPlay() {\r\n        return (isWhite() && isWhiteTurn()) || (!isWhite() && !isWhiteTurn());\r\n    }\r\n\r\n    // TODO: add getUsername\r\n\r\n    Vector selected;\r\n\r\n    private void onFieldClicked(Vector at) {\r\n        if (!canPlay())\r\n            return;\r\n        if (selected == null && (!Board.instance.isNull(at) && Board.instance.get(at).isColor(isWhite() ? Piece.Color.White : Piece.Color.Black))) {\r\n            selected = at;\r\n            GuiManager.instance.onFieldClicked(at);//TODO:FIX THIS IMPLEMENTATION LATER\r\n        } else if (selected == at) {\r\n            selected = null;\r\n            GuiManager.instance.resetHighlights();//TODO:FIX THIS IMPLEMENTATION LATER\r\n        } else if (selected != null) {\r\n            Board.instance.tryMove(selected, at);\r\n            selected = null;\r\n            GuiManager.instance.resetHighlights();//TODO:FIX THIS IMPLEMENTATION LATER\r\n        }\r\n    }\r\n\r\n    Move networkMove = new Move(Vector.ZERO, Vector.ZERO);\r\n\r\n    public void handleNetworkPackage(final Packet packet) {\r\n\r\n        if (packet.getType() == Packet.Type.MOVE) {\r\n            Vector from = new Vector(), to = new Vector();\r\n            String[] values = packet.getBuffer().split(\"~\");\r\n\r\n            if (values.length == 2) {\r\n                from.unapck(values[0]);\r\n                to.unapck(values[1]);\r\n            } else\r\n                throw new IllegalArgumentException(\"Invalid buffer format\");\r\n\r\n            Board.instance.move(from, to);\r\n        } else if (packet.getType() == Packet.Type.CUSTOM) {\r\n            return;//TODO:HANDLE CUSTOM\r\n        } else if (packet.getType() == Packet.Type.START_GAME) {\r\n            newGame();\r\n        } else if (packet.getType() == Packet.Type.CHANGE_COLOR) {\r\n            changeColor();\r\n        } else if (packet.getType() == Packet.Type.DISCONNECT) {\r\n            return;//TODO:HANDLE DISCONNECTED\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/game/GameManager.java b/src/game/GameManager.java
--- a/src/game/GameManager.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/game/GameManager.java	(date 1685739775712)
@@ -15,11 +15,12 @@
     public static GameManager instance;
 
     public static void initialize() {
-        util.Console.message("Initializing GameManager.", Console.PrintType.Main);
 
         if (instance == null)
             instance = new GameManager();
 
+        util.Console.message("Initializing GameManager.", instance);
+
         try {
             User.loadUsers();
         } catch (IOException ex) {
Index: src/socket/events/ServerEventHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package socket.events;\r\n\r\nimport util.Array;\r\nimport util.Console;\r\n\r\nimport java.net.Socket;\r\n\r\npublic class ServerEventHandler extends util.Array<ServerEventable> implements ServerEventable {\r\n\r\n    @Override\r\n    public void add(ServerEventable actions) {\r\n        if (contains(actions)) {\r\n            util.Console.warning(\"Action you are trying to add already exist to list!\", Console.PrintType.Socket);\r\n            return;\r\n        }\r\n\r\n        super.add(actions);\r\n    }\r\n\r\n    @Override\r\n    public void onServerStarted() {\r\n        for (int i = 0; i < size(); i++)\r\n            get(i).onServerStarted();\r\n    }\r\n\r\n    @Override\r\n    public void onServerStopped() {\r\n        for (int i = 0; i < size(); i++)\r\n            get(i).onServerStopped();\r\n    }\r\n\r\n    @Override\r\n    public void onServerStartListening() {\r\n        for (int i = 0; i < size(); i++)\r\n            get(i).onServerStartListening();\r\n    }\r\n\r\n    @Override\r\n    public void onServerStopListening() {\r\n        for (int i = 0; i < size(); i++)\r\n            get(i).onServerStopListening();\r\n    }\r\n\r\n    @Override\r\n    public void onSocketConnected(Socket clientSocket) {\r\n        for (int i = 0; i < size(); i++)\r\n            get(i).onSocketConnected(clientSocket);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/socket/events/ServerEventHandler.java b/src/socket/events/ServerEventHandler.java
--- a/src/socket/events/ServerEventHandler.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/socket/events/ServerEventHandler.java	(date 1685739950816)
@@ -10,7 +10,7 @@
     @Override
     public void add(ServerEventable actions) {
         if (contains(actions)) {
-            util.Console.warning("Action you are trying to add already exist to list!", Console.PrintType.Socket);
+            util.Console.warning("Action you are trying to add already exist to list!", this);
             return;
         }
 
Index: src/socket/packages/Stream.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package socket.packages;\r\n\r\nimport util.Console;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.net.Socket;\r\nimport java.nio.Buffer;\r\n\r\npublic class Stream {\r\n    protected PrintWriter out;\r\n    protected BufferedReader in;\r\n\r\n    public PrintWriter getOutStream() {\r\n        return this.out;\r\n    }\r\n\r\n    public BufferedReader getInStream() {\r\n        return this.in;\r\n    }\r\n\r\n    protected void initializeStreams(Socket socket) {\r\n        try {\r\n            this.out = new PrintWriter(socket.getOutputStream(), true);\r\n            InputStreamReader isr = new InputStreamReader(socket.getInputStream());\r\n            this.in = new BufferedReader(isr);\r\n        } catch (Exception ex) {\r\n            Console.error(\"Failed to initialize IN/OUT Streams!\", Console.PrintType.Socket);\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n    //TODO: HANDLE SENDING/RECEIVING\r\n\r\n    public void send(Packet packet) {\r\n        out.println(packet.getPackedBuffer());\r\n    }\r\n\r\n    public Packet receive(Packet packet) {\r\n        try {\r\n            packet.setReceivedBuffer(in.readLine());\r\n            return packet;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n            System.exit(-1);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/socket/packages/Stream.java b/src/socket/packages/Stream.java
--- a/src/socket/packages/Stream.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/socket/packages/Stream.java	(date 1685739963517)
@@ -26,7 +26,7 @@
             InputStreamReader isr = new InputStreamReader(socket.getInputStream());
             this.in = new BufferedReader(isr);
         } catch (Exception ex) {
-            Console.error("Failed to initialize IN/OUT Streams!", Console.PrintType.Socket);
+            Console.error("Failed to initialize IN/OUT Streams!", this);
             ex.printStackTrace();
         }
     }
Index: src/socket/NetworkManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package socket;\r\n\r\nimport socket.events.ServerEventable;\r\nimport util.Console;\r\n\r\nimport java.net.Socket;\r\n\r\npublic class NetworkManager implements ServerEventable {\r\n    public static NetworkManager instance = null;\r\n\r\n    public static boolean isMaster() {\r\n        return !Server.isMasterUp();\r\n    }\r\n\r\n    public static void connectClient() {\r\n        LocalClient.connect();\r\n    }\r\n\r\n    public static void initialize() {\r\n        util.Console.message(\"Initializing NetworkManager.\", Console.PrintType.Main);\r\n\r\n        if (instance != null)\r\n            return;\r\n\r\n        instance = new NetworkManager();\r\n\r\n        if (!Server.isMasterUp()) {\r\n            Server.start();\r\n            Server.startListening();\r\n        }\r\n    }\r\n\r\n    public NetworkManager() {\r\n        Server.eventHandler.add(this);\r\n    }\r\n\r\n    @Override\r\n    public void onServerStarted() {\r\n        System.out.println(\"Server start TEST\");\r\n    }\r\n\r\n    @Override\r\n    public void onServerStopped() {\r\n        System.out.println(\"Server stop TEST\");\r\n    }\r\n\r\n    @Override\r\n    public void onServerStartListening() {\r\n        System.out.println(\"Listening start TEST\");\r\n    }\r\n\r\n    @Override\r\n    public void onServerStopListening() {\r\n        System.out.println(\"Listening stop TEST\");\r\n    }\r\n\r\n    @Override\r\n    public void onSocketConnected(Socket clientSocket) {\r\n        ServerRoom room = RoomManager.findOpenRoom();\r\n        room = room == null ? RoomManager.createNewRoom() : room;\r\n\r\n        room.clientTryJoin(new Client(clientSocket));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/socket/NetworkManager.java b/src/socket/NetworkManager.java
--- a/src/socket/NetworkManager.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/socket/NetworkManager.java	(date 1685740116198)
@@ -17,7 +17,7 @@
     }
 
     public static void initialize() {
-        util.Console.message("Initializing NetworkManager.", Console.PrintType.Main);
+        util.Console.message("Initializing NetworkManager.", instance);
 
         if (instance != null)
             return;
Index: src/socket/RoomManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package socket;\r\n\r\nimport socket.packages.Packet;\r\nimport util.Array;\r\nimport util.Console;\r\n\r\npublic class RoomManager {\r\n    public static RoomManager instance;\r\n\r\n    public static void initialize() {\r\n        util.Console.message(\"Initializing RoomManager.\", Console.PrintType.Main);\r\n\r\n        if (instance == null)\r\n            instance = new RoomManager();\r\n    }\r\n\r\n    public static final util.Array<ServerRoom> rooms = new Array<>();\r\n\r\n    public static ServerRoom findOpenRoom() {\r\n        for (int i = 0; i < rooms.size(); i++)\r\n            if (rooms.get(i).isOpen())\r\n                return rooms.get(i);\r\n        return null;\r\n    }\r\n\r\n    public static ServerRoom createNewRoom() {\r\n        ServerRoom newRoom = new ServerRoom();\r\n        rooms.add(newRoom);\r\n        return newRoom;\r\n    }\r\n\r\n    public RoomManager() {\r\n        ServerRoom.onRoomStarted.add(this::onRoomStarted);\r\n    }\r\n\r\n    public void onRoomStarted(ServerRoom room) {\r\n        handleRoomProcess(room);\r\n    }\r\n\r\n    private void handleRoomProcess(ServerRoom room) {\r\n\r\n        //TODO : DO GAME LOGIC\r\n        util.Array<Client> clients = room.getClients();\r\n\r\n        clients.foreach((Client client)->{\r\n            if(client.getSocket().isClosed()){\r\n                System.out.println(\"CLOSED SERVER CLIENT\");\r\n            }\r\n        });\r\n\r\n        Packet packet = new Packet(\"\",Packet.Type.CHANGE_COLOR);\r\n        clients.get(clients.size() - 1).send(packet);\r\n        packet.setBuffer(\"\",Packet.Type.START_GAME);\r\n        Packet finalPacket = packet;\r\n        clients.foreach((Client client) -> {\r\n            client.send(finalPacket);\r\n        });\r\n\r\n        Client whitePlayer = clients.get(0), blackPlayer = clients.get(1);\r\n\r\n        if(whitePlayer.getSocket().isClosed() || blackPlayer.getSocket().isClosed()) {\r\n            System.exit(-1);\r\n        }\r\n\r\n        boolean isWhiteTurn = true;\r\n\r\n        while (true) {\r\n\r\n            try {\r\n                packet = isWhiteTurn ? whitePlayer.receive(packet) : blackPlayer.receive(packet);\r\n\r\n                if (isWhiteTurn)\r\n                    blackPlayer.send(packet);\r\n                else\r\n                    whitePlayer.send(packet);\r\n\r\n            } catch (Exception ex) {\r\n                ex.printStackTrace();\r\n                break;\r\n            }\r\n            isWhiteTurn = !isWhiteTurn;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/socket/RoomManager.java b/src/socket/RoomManager.java
--- a/src/socket/RoomManager.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/socket/RoomManager.java	(date 1685740133404)
@@ -8,7 +8,7 @@
     public static RoomManager instance;
 
     public static void initialize() {
-        util.Console.message("Initializing RoomManager.", Console.PrintType.Main);
+        util.Console.message("Initializing RoomManager.", instance);
 
         if (instance == null)
             instance = new RoomManager();
Index: src/gui/GuiManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package gui;\r\n\r\nimport game.Board;\r\nimport game.Move;\r\nimport game.Piece;\r\nimport gui.images.Field;\r\nimport gui.images.Image;\r\nimport util.Array;\r\nimport util.Console;\r\nimport util.Vector;\r\n\r\npublic class GuiManager {\r\n    public static GuiManager instance;\r\n\r\n    public static void initialize() {\r\n        util.Console.message(\"Initializing GuiManager.\", Console.PrintType.Main);\r\n\r\n        Image.wakeUp();\r\n\r\n        if (instance == null) instance = new GuiManager();\r\n    }\r\n\r\n    private final Login loginWindow;\r\n    private final Register registerWindow;\r\n    private final Menu menuWindow;\r\n    private final Game gameWindow;\r\n\r\n    public Login getLoginWindow() {\r\n        return this.loginWindow;\r\n    }\r\n\r\n    public Register getRegisterWindow() {\r\n        return this.registerWindow;\r\n    }\r\n\r\n    public Menu getMenuWindow() {\r\n        return this.menuWindow;\r\n    }\r\n\r\n    public Game getGameWindow() {\r\n        return this.gameWindow;\r\n    }\r\n\r\n    public GuiManager() {\r\n        this.loginWindow = new Login();\r\n        this.registerWindow = new Register();\r\n        this.menuWindow = new Menu();\r\n        this.gameWindow = new Game();\r\n\r\n        this.loginWindow.showWindow();\r\n\r\n        //Field.onFieldClicked.add(this::onFieldClicked);\r\n\r\n        Board.instance.onPieceEaten.add(this::onPieceEaten);\r\n        Board.instance.onPieceMoved.add(this::onPieceMoved);\r\n        Board.instance.onPieceMove.add(this::onPieceMove);\r\n\r\n        updateFields();\r\n    }\r\n\r\n    private void onPieceMove(Move move) {\r\n        util.Vector at = move.getFrom();\r\n        this.gameWindow.getField(at).setImage(null);\r\n    }\r\n\r\n    private void onPieceMoved(Piece piece) {\r\n        util.Vector at = piece.getPosition();\r\n\r\n        this.gameWindow.getField(at).setImage(Image.IMAGES[piece.getColorCode()][piece.getTypeCode() - 1]);\r\n    }\r\n\r\n    private void onPieceEaten(Piece piece) {\r\n        util.Vector at = piece.getPosition();\r\n\r\n        this.gameWindow.getField(at).setImage(null);\r\n    }\r\n\r\n    public void updateFields() {\r\n        this.gameWindow.clearFields();\r\n\r\n        util.Array<Piece> allPieces = Board.instance.getAllPieces();\r\n        allPieces.foreach((Piece piece) -> {\r\n            util.Vector at = piece.getPosition();\r\n\r\n            this.gameWindow.getField(at).setImage(Image.IMAGES[piece.getColorCode()][piece.getTypeCode() - 1]);\r\n        });\r\n    }\r\n\r\n    public void startGame() {\r\n        updateFields();\r\n        menuWindow.hideWindow();\r\n        gameWindow.showWindow();\r\n    }\r\n\r\n    public void loggedIn() {\r\n        this.loginWindow.hideWindow();\r\n        this.menuWindow.showWindow();\r\n    }\r\n\r\n    public void registered() {\r\n        this.registerWindow.hideWindow();\r\n        this.menuWindow.showWindow();\r\n    }\r\n\r\n    public void accountDeleted() {\r\n        this.getMenuWindow().hideWindow();\r\n        this.getLoginWindow().showWindow();\r\n    }\r\n\r\n    //HIGHLIGHTING\r\n    private final Array<Field> currentHighlights = new Array<>();\r\n\r\n    public void resetHighlights() {\r\n        currentHighlights.foreach((Field field) -> {\r\n            field.setColor(ColorGradient.FIELD.getColor(field.isGradient()));\r\n        });\r\n        currentHighlights.clear();\r\n    }\r\n\r\n    private void setHighlight(Vector at) {\r\n        Field temp = this.gameWindow.getField(at);\r\n        temp.setColor(ColorGradient.HIGHLIGHT.getColor(temp.isGradient()));\r\n        currentHighlights.add(temp);\r\n    }\r\n\r\n    private void setHighlights(util.Array<Vector> at) {\r\n        at.foreach((Vector position) -> {\r\n            Field temp = this.gameWindow.getField(position);\r\n\r\n            temp.setColor(Board.instance.isNull(position) ? ColorGradient.MOVE.getColor(temp.isGradient()) : ColorGradient.ATTACK.getColor(temp.isGradient()));\r\n            currentHighlights.add(temp);\r\n        });\r\n    }\r\n\r\n    //TODO:IMPLEMENT THIS LATER\r\n    public void onFieldClicked(Vector vector) {\r\n        resetHighlights();\r\n\r\n        Piece piece = Board.instance.get(vector);\r\n\r\n        if (piece == null) return;\r\n\r\n        setHighlight(vector);\r\n        setHighlights(piece.getMoves());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/gui/GuiManager.java b/src/gui/GuiManager.java
--- a/src/gui/GuiManager.java	(revision c7e487094a151b1c64fd76cefd27f6d6d5f563cb)
+++ b/src/gui/GuiManager.java	(date 1685739879047)
@@ -13,11 +13,10 @@
     public static GuiManager instance;
 
     public static void initialize() {
-        util.Console.message("Initializing GuiManager.", Console.PrintType.Main);
-
         Image.wakeUp();
 
         if (instance == null) instance = new GuiManager();
+        util.Console.message("Initializing GuiManager.", instance);
     }
 
     private final Login loginWindow;
